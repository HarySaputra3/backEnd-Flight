generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum RoleUser {
  CUSTOMER
  ADMIN
}

enum TypeSeat {
  ECONOMY
  BUSINESS
  FIRST
}

enum StatusTicket {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  passport  String?
  role      RoleUser
  tickets   Ticket[]
  sessions  Session[]
}



model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Airplane {
  id        String   @id @default(cuid())
  code      String   @default("ABC-123")
  name      String
  image     String
  flight   Flight[]
}

model Flight {
  id                  String   @id @default(cuid())
  planeId             String
  plane               Airplane @relation(fields: [planeId], references: [id]) 
  departureDate       DateTime
  departureCity       String
  departureCityCode   String
  arrivalDate         DateTime
  destinationCity     String
  destinationCityCode String
  price               Int
  seats               FlightSeat[]
  tickets             Ticket[]
}

model FlightSeat {
  id         String   @id @default(cuid())
  flightId   String
  flight     Flight   @relation(fields: [flightId], references: [id])
  seatNumber String
  isBooked   Boolean  @default(false) 
  type       TypeSeat
  tickets     Ticket? 
}

model Ticket {
  id            String   @id @default(cuid())
  code          String   @unique
  flightId      String
  flight        Flight   @relation(fields: [flightId], references: [id]) 
  customerId    String
  customer      User     @relation(fields: [customerId], references: [id])
  seatId        String   @unique
  seat          FlightSeat @relation(fields: [seatId], references: [id])
  bookingDate   DateTime
  price         BigInt
  status        StatusTicket
  tokenMidtrans String?
}
